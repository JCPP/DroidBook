package com.jcpp.droidbook.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BOOK.
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Editor = new Property(3, String.class, "editor", false, "EDITOR");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "DATE");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property Nop = new Property(6, Integer.class, "nop", false, "NOP");
        public final static Property Vote = new Property(7, Integer.class, "vote", false, "VOTE");
        public final static Property Vote_avg = new Property(8, Double.class, "vote_avg", false, "VOTE_AVG");
        public final static Property My_comment = new Property(9, String.class, "my_comment", false, "MY_COMMENT");
        public final static Property Cover_path = new Property(10, String.class, "cover_path", false, "COVER_PATH");
    };

    private DaoSession daoSession;


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BOOK' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CODE' TEXT," + // 1: code
                "'TITLE' TEXT NOT NULL ," + // 2: title
                "'EDITOR' TEXT," + // 3: editor
                "'DATE' INTEGER," + // 4: date
                "'DESCRIPTION' TEXT," + // 5: description
                "'NOP' INTEGER," + // 6: nop
                "'VOTE' INTEGER," + // 7: vote
                "'VOTE_AVG' REAL," + // 8: vote_avg
                "'MY_COMMENT' TEXT," + // 9: my_comment
                "'COVER_PATH' TEXT);"); // 10: cover_path
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOOK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
        stmt.bindString(3, entity.getTitle());
 
        String editor = entity.getEditor();
        if (editor != null) {
            stmt.bindString(4, editor);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        Integer nop = entity.getNop();
        if (nop != null) {
            stmt.bindLong(7, nop);
        }
 
        Integer vote = entity.getVote();
        if (vote != null) {
            stmt.bindLong(8, vote);
        }
 
        Double vote_avg = entity.getVote_avg();
        if (vote_avg != null) {
            stmt.bindDouble(9, vote_avg);
        }
 
        String my_comment = entity.getMy_comment();
        if (my_comment != null) {
            stmt.bindString(10, my_comment);
        }
 
        String cover_path = entity.getCover_path();
        if (cover_path != null) {
            stmt.bindString(11, cover_path);
        }
    }

    @Override
    protected void attachEntity(Book entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // editor
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // nop
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // vote
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // vote_avg
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // my_comment
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // cover_path
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.getString(offset + 2));
        entity.setEditor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNop(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setVote(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setVote_avg(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setMy_comment(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCover_path(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
